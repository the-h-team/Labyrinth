package com.github.sanctum.labyrinth.library;

import com.github.sanctum.labyrinth.LabyrinthProvider;
import org.bukkit.plugin.Plugin;
import org.jetbrains.annotations.NotNull;

import java.util.Locale;
import java.util.UUID;

/**
 * Represents a String based key which consists of two components - a namespace
 * and a key.
 * <p>
 * Namespaces may only contain lowercase alphanumeric characters, periods,
 * underscores, and hyphens.
 * <p>
 * Keys may only contain lowercase alphanumeric characters, periods,
 * underscores, hyphens, and forward slashes.
 * <p>
 * This class is 100% constructed by the bukkit developers but since its not available in versions prior to 1.12 this allots the same effects for legacy builds.
 */
public final class NamespacedKey {

	/**
	 * The namespace representing all inbuilt keys.
	 */
	public static final String MINECRAFT = "minecraft";
	/**
	 * The namespace representing all keys generated by Bukkit for backwards
	 * compatibility measures.
	 */
	public static final String BUKKIT = "bukkit";
	//
	private final String namespace;
	private final String key;

	/**
	 * Create a key in a specific namespace.
	 *
	 * @param namespace namespace
	 * @param key       key
	 * @deprecated should never be used by plugins, for internal use only!!
	 */
	@SuppressWarnings("DeprecatedIsStillUsed")
	@Deprecated
	protected NamespacedKey(@NotNull String namespace, @NotNull String key) {
		this.namespace = namespace;
		this.key = key;

		String string = toString();
		if (string.length() > 256) {
			LabyrinthProvider.getInstance().getLogger().severe("- NamespacedKey must be less than 256 characters; " + string);
		}
	}

	/**
	 * Create a key in the plugin's namespace.
	 * <p>
	 * Namespaces may only contain lowercase alphanumeric characters, periods,
	 * underscores, and hyphens.
	 * <p>
	 * Keys may only contain lowercase alphanumeric characters, periods,
	 * underscores, hyphens, and forward slashes.
	 *
	 * @param plugin the plugin to use for the namespace
	 * @param key    the key to create
	 */
	public NamespacedKey(@NotNull("Plugin cannot be null!") Plugin plugin, @NotNull String key) {

		this.namespace = plugin.getName().toLowerCase(Locale.ROOT);
		this.key = key.toLowerCase(Locale.ROOT);

		String string = toString();
		if (string.length() > 256) {
			LabyrinthProvider.getInstance().getLogger().severe("- NamespacedKey must be less than 256 characters; " + string);
		}

	}

	@NotNull
	public String getNamespace() {
		return namespace;
	}

	@NotNull
	public String getKey() {
		return key;
	}

	@Override
	public int hashCode() {
		int hash = 5;
		hash = 47 * hash + this.namespace.hashCode();
		hash = 47 * hash + this.key.hashCode();
		return hash;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}
		if (getClass() != obj.getClass()) {
			return false;
		}
		final NamespacedKey other = (NamespacedKey) obj;
		return this.namespace.equals(other.namespace) && this.key.equals(other.key);
	}

	@Override
	public String toString() {
		return this.namespace + ":" + this.key;
	}

	/**
	 * Return a new random key in the {@link #BUKKIT} namespace.
	 *
	 * @return new key
	 * @deprecated should never be used by plugins, for internal use only!!
	 */
	@Deprecated
	@NotNull
	public static NamespacedKey randomKey() {
		return new NamespacedKey(BUKKIT, UUID.randomUUID().toString());
	}

	/**
	 * Get a key in the Minecraft namespace.
	 *
	 * @param key the key to use
	 * @return new key in the Minecraft namespace
	 */
	@NotNull
	public static NamespacedKey minecraft(@NotNull String key) {
		return new NamespacedKey(MINECRAFT, key);
	}

}